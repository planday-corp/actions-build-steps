name: Build standard planday dockerfile

on:
  pull_request_review:
    types: [submitted,edited]
  push:
    branches:
      - "!main"
      - "!master"
  workflow_call:
    inputs:
      image_name:
        description: "name of the docker image that will be built"
        required: true
        type: string
      registry: 
        type: string
        description: "Azure Containers Registry to push the image to"
        required: true
      registrydev: 
        type: string
        description: "Azure dev Containers Registry to pull base images from"
        required: true
      version:
        type: string
        required: true
      helm_version:
        type: string 
        default: "3.4.0"
        required: false
      helm_chart:
        type: string
        default: '1.0.210'
        required: false
      gateway:
        type: string
        default: '1.0.210'
        required: false
      octopus_server_url:
        type: string
        required: true
      octopus_project_name:
        type: string
        description: "octopus project name"
        required: true
      dockerargs:
        type: string
        description: "Additional build arguments for docker, provided as a multiline string"
        required: false
      sonarqube_url:
        type: string
        description: "sonarqube url"
        required: true

    secrets:
      acr_username: 
        description: "service principal ID for azure ACR "
        required: true
      acr_password: 
        description: "password for service principal for azure ACR"
        required: true
      octopus_api_key:
        description: "api-key for octopus deploy"
        required: true      
      sonarqube_token:
        required: true
        description: "token for sonarqube"
jobs:
  build-and-push:
    runs-on: self-hosted
    steps:

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - uses: actions/checkout@v3 

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker # defaults to "docker-containerized"      

      - name: Log in to Azure ACR
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}

      - name: Log in to Azure dev ACR
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ inputs.registrydev }}
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ inputs.registry }}/${{inputs.image_name}}:${{inputs.version}}
          file: Dockerfile
          build-args: -|
            SONARQUBE_URL=${{inputs.sonarqube_url}}
            SONARQUBE_PROJECT_NAME=${{inputs.image_name}}
            SONARQUBE_TOKEN=${{secrets.sonarqube_token}}
            SONARQUBE_VERSION=${{inputs.version}}
            ${{inputs.dockerargs}}

  create-release: 
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [build-and-push]
    runs-on: self-hosted
    steps:     

      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1.1.10

      - name: Create release üêô
        uses: OctopusDeploy/create-release-action@v1.1.1
        with:
          deploy_to: ${{ github.event.inputs.environment }}
          api_key: ${{ secrets.octopus_api_key }}
          server: ${{ inputs.octopus_server_url }}
          space: 'Default'
          project: ${{ inputs.octopus_project_name }}
          release_number: ${{inputs.version}}
          packages: | 
            ${{inputs.image_name}}:${{inputs.version}}
            helm:${{inputs.helm_version}}
            planday-service-istio:${{inputs.helm_chart}}
            certificate-and-gateway:${{inputs.gateway}}
      
#  deploy-production:
#    if: github.event.review.state == 'approved'
#    runs-on: ubuntu-latest
#    steps:
#      - name: approved
#        run: echo "This PR was approved"
#      - uses: actions/checkout@v2      
#      - name: Set up Docker
#        uses: docker/setup-buildx-action@v1
#        with:
#          driver: docker # defaults to "docker-containerized"      
#      - name: Log in to Azure ACR
#        uses: docker/login-action@v1.10.0
#        with:
#          registry: ${{ secrets.registry }}
#          username: ${{ secrets.username }}
#          password: ${{ secrets.password }}
#      - name: Build and push container image to registry
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: ${{ secrets.registry }}/${{env.API_NAME}}:1.0.${{github.run_number}}
#          file: Dockerfile