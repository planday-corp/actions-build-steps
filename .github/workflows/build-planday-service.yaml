name: Build and push standard Planday Docker image and deploy in Kubernetes with Octopus Deploy

on:
  pull_request_review:
    types: [submitted,edited]
  push:
    branches-ignore:
      - "main"
      - "master"
  workflow_call:
    inputs:
      image_name:
        type: string
        description: "Name of the Docker image to build. (ex: 'myapp')"
        required: true
      registry: 
        type: string
        description: "Azure Containers Registry to push the image to"
        required: true
      registrydev: 
        type: string
        description: "Azure dev Containers Registry to pull base images from"
        required: true
      version:
        type: string
        description: "Version of the Docker image to build. (ex: '1.2.3' or 'v1.2.4)"
        required: true
      helm_version:
        type: string
        description: "Helm version"
        default: "3.4.0"
        required: false
      helm_chart:
        type: string
        description: "Helm chart version used to deploy the Docker image"
        default: '1.0.212'
        required: false
      gateway:
        type: string
        description: "Gateway version"
        default: '1.0.212'
        required: false
      octopus_server_url:
        type: string
        description: "URL of the Octopus server"
        required: true
      octopus_project_name:
        type: string
        description: "Name of the project in Octopus"
        required: true
      dockerargs:
        type: string
        description: "Additional build arguments for docker, provided as a multiline string"
        required: false
      sonarqube_server_url:
        type: string
        description: "URL of the SonarQube server"
        required: true

    secrets:
      acr_username: 
        description: "Service Principal ID for Azure ACR"
        required: true
      acr_password: 
        description: "Service Principal password for Azure ACR"
        required: true
      octopus_api_key:
        description: "API key of the Octopus server"
        required: true      
      sonarqube_token:
        description: "SonarQube server token"
        required: true

jobs:
  build-and-push:
    name: Build and push Docker image to ACR
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3 

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker # defaults to "docker-containerized"      

      - name: Log in to Azure ACR
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}

      - name: Log in to Azure dev ACR
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ inputs.registrydev }}
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ inputs.registry }}/${{inputs.image_name}}:${{inputs.version}}
          file: Dockerfile
          build-args: |
            SONARQUBE_URL=${{inputs.sonarqube_server_url}}
            SONARQUBE_PROJECT_NAME=${{inputs.image_name}}
            SONARQUBE_TOKEN=${{secrets.sonarqube_token}}
            SONARQUBE_VERSION=${{inputs.version}}
            ${{inputs.dockerargs}}
      
      - name: Retrieve Sonarqube scan status
        shell: bash
        id: sonarqube_scan_status
        run: |
          key=$(curl -s -q \
            -u ${{secrets.sonarqube_token}}: \
            "${{inputs.sonarqube_server_url}}/api/project_analyses/search?project=${{inputs.image_name}}" \
            | jq -r '.analyses[] | select(.projectVersion=="${{inputs.version}}") | .key')

          status=$(curl -s -q \
            -u ${{secrets.sonarqube_token}}: \
            "${{inputs.sonarqube_server_url}}/api/qualitygates/project_status?analysisId=$key" | jq -r '.projectStatus.status')
          
          echo "$status"
      
      - name: Update the Pull Request with the SonarQube scan result
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          status: "${{ steps.sonarqube_scan_status.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### SonarQube scan output üñå\`${{ env.status }}\`

            <details><summary>Details</summary>

            [Project](${{inputs.sonarqube_server_url}}/dashboard?id=${{inputs.image_name}})

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  create-octopus-environment:
    name: Create an environment in Octopus Deploy
    runs-on: self-hosted
    steps:
    - name: Set environment name from branch name
      uses: planday-corp/actions-environment-name-sanitation@v1
      id: set_environment_name

    - uses: planday-corp/actions-octopus-environment-config@v2
      with: 
        environment_name: "${{steps.set_environment_name.outputs.environment_name}}"
        delete_environment: false
        environment_to_copy: "stable"
        octopus_server_url: "${{inputs.octopus_server_url}}"
        octopus_api_key: ${{secrets.octopus_api_key}}
      
  create-deploy-release:
    name: Create a release in Octopus and deploy it to a dynamic environment
    runs-on: self-hosted
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') && ! contains('
        refs/heads/main
        refs/heads/master', github.ref) }}
    needs: [build-and-push, create-octopus-environment]
    steps:
    - name: Set environment name from branch name
      uses: planday-corp/actions-environment-name-sanitation@v1
      id: set_environment_name
    
    - name: Install Octopus CLI üêô
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.10
    
    - name: Deploy release üêô
      uses: OctopusDeploy/create-release-action@v1.1.1
      with:
        deploy_to: "${{steps.set_environment_name.outputs.environment_name}}"
        api_key: ${{ secrets.octopus_api_key }}
        server: ${{ inputs.octopus_server_url }}
        space: 'Default'
        project: ${{ inputs.octopus_project_name }}
        release_number: ${{inputs.version}}
        progress: true
        ignore_existing: true
        packages: |
          ${{inputs.image_name}}:${{inputs.version}}
          helm:${{inputs.helm_version}}
          planday-service-istio:${{inputs.helm_chart}}
          certificate-and-gateway:${{inputs.gateway}}