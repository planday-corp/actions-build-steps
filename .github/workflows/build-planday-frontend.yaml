name: Build and push Planday frontend service to Azure CDN

on:
  workflow_call:
    inputs:
      image_name:
        type: string
        description: "Name of the Docker image to build. (ex: 'myapp')"
        required: true
      docker_context:
        type: string
        description: "Docker build context. Default is the default git context (current directory)"
        default: "."
        required: false
      dockerfile_path:
        type: string
        description: "Path to the Dockerfile. (default '{context}/Dockerfile')"
        default: Dockerfile
        required: false
      registry: 
        type: string
        description: "Azure Containers Registry to push the image to"
        required: true
      version:
        type: string
        description: "Version of the Docker image to build. (ex: '1.2.3' or 'v1.2.4')"
        required: true
      helm_version:
        type: string
        description: "Helm version"
        default: "3.4.0"
        required: false
      helm_chart:
        type: string
        description: "Helm chart version used to deploy the Docker image"
        default: '1.0.212'
        required: false
      gateway:
        type: string
        description: "Gateway version"
        default: '1.0.212'
        required: false
      octopus_server_url:
        type: string
        description: "URL of the Octopus server"
        required: true
      octopus_project_name:
        type: string
        description: "Name of the project in Octopus"
        required: true
      dockerargs:
        type: string
        description: "Additional build arguments for docker, provided as a multiline string"
        required: false
      sonarqube_skip_scan:
        type: boolean
        description: "Whether to skip the Sonarqube scan. Default: false"
        required: false
        default: false
      sonarqube_server_url:
        type: string
        description: "URL of the SonarQube server"
        required: true
      aks_resource_group:
        type: string
        description: "Name of the AKS resource group"
        required: true
      aks_cluster_name:
        type: string
        description: "Name of the AKS cluster"
        required: true

    secrets:
      acr_username: 
        description: "Service Principal ID for Azure ACR"
        required: true
      acr_password: 
        description: "Service Principal password for Azure ACR"
        required: true
      octopus_api_key:
        description: "API key of the Octopus server"
        required: true      
      sonarqube_token:
        description: "SonarQube server token"
        required: true
      client_id:
        description: "Service Principal Client ID for Planday-github"
        required: true
      tenant_id:
        description: "Service Principal Tenant ID for Planday-github"
        required: true
      subscription_id:
        description: "Default Subscription"
        required: true

    outputs:
      release_number: 
        description: "Octopus release number"
        value: ${{jobs.create-deploy-release.outputs.release_number}}
jobs:
  build-and-push:
    name: Build and push Docker image to ACR
    runs-on: self-hosted
    outputs:
      sonarqube_scan_status: ${{ steps.sonarqube_scan_status.outputs.sonarqube_scan_status }}
      sonarqube_server_url: ${{ steps.sonarqube_scan_status.outputs.sonarqube_server_url}}
      image_name: ${{ steps.sonarqube_scan_status.outputs.image_name}}
    steps:
      - uses: actions/checkout@v3 
      - name: Get branch name
        id: get_branch_name
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            echo "::set-output name=branch::$(echo ${GITHUB_REF##*/})"
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            echo "::set-output name=branch::$(echo $GITHUB_HEAD_REF)"
          else
            echo "::set-output name=branch::INVALID_EVENT_BRANCH_UNKNOWN"
          fi
      - name: Get time & date
        id: get_date
        run: echo "::set-output name=date::$(TZ=Europe/Copenhagen date +'%d-%m-%Y %H:%M:%S')"
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker # defaults to "docker-containerized"

      - name: Log in to Azure ACR
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ inputs.registry }}/${{inputs.image_name}}:${{inputs.version}}
          file: ${{inputs.dockerfile_path}}
          context: ${{inputs.docker_context}}
          build-args: |
            PACKAGE_VERSION=${{inputs.version}}
            OCT_API_KEY=${{secrets.octopus_api_key}}
            OCT_URL=${{inputs.octopus_server_url}}
            OCT_PROJECT_NAME=${{inputs.octopus_project_name}}
            BUILD_REVISION=${{github.run_number}}
            BUILD_BRANCH=${{steps.get_branch_name.outputs.branch}}
            BUILD_TIMESTAMP=${{steps.get_date.outputs.date}}
            SONARQUBE_URL=${{inputs.sonarqube_server_url}}
            SONARQUBE_PROJECT_NAME=${{inputs.image_name}}
            SONARQUBE_TOKEN=${{secrets.sonarqube_token}}
            SONARQUBE_VERSION=${{inputs.version}}
            ${{inputs.dockerargs}}

      - name: Retrieve Sonarqube scan status
        shell: bash
        id: sonarqube_scan_status
        if: github.event_name == 'pull_request'
        env:
          sonarqube_skip_scan: ${{inputs.sonarqube_skip_scan}}
        run: |
          if [ "$sonarqube_skip_scan" == "true" ]; then 
            echo "::set-output name=sonarqube_scan_status::SKIPPED"
            echo "::set-output name=sonarqube_server_url::${{inputs.sonarqube_server_url}}"
            echo "::set-output name=image_name::${{inputs.image_name}}"
            exit 0
          fi

          key=$(curl -s -q \
            -u ${{secrets.sonarqube_token}}: \
            "${{inputs.sonarqube_server_url}}/api/project_analyses/search?project=${{inputs.image_name}}" \
            | jq -r '.analyses[] | select(.projectVersion=="${{inputs.version}}")' \
            | jq -r -s 'sort_by(.date) | last | .key')

          status=$(curl -s -q \
            -u ${{secrets.sonarqube_token}}: \
            "${{inputs.sonarqube_server_url}}/api/qualitygates/project_status?analysisId=$key" | jq -r '.projectStatus.status')
          
          echo "::set-output name=sonarqube_scan_status::$status"
          echo "::set-output name=sonarqube_server_url::${{inputs.sonarqube_server_url}}"
          echo "::set-output name=image_name::${{inputs.image_name}}"

  create-octopus-environment:
    name: Create an environment in Octopus
    runs-on: self-hosted
    steps:
    - name: Sanitize branch name
      uses: planday-corp/actions-environment-name-sanitation@v1
      id: set_environment_name

    - name: Create Octopus environment
      uses: planday-corp/actions-octopus-environment-config@v2
      with: 
        environment_name: "${{steps.set_environment_name.outputs.environment_name}}"
        delete_environment: false
        environment_to_copy: "stable"
        octopus_server_url: "${{inputs.octopus_server_url}}"
        octopus_api_key: ${{secrets.octopus_api_key}}

  create-deploy-release:
    name: Create and deploy a release in Octopus
    runs-on: self-hosted
    outputs:
      release_number: ${{inputs.version}}
    # When previous jobs succeded and the branch isn't "main" or "master"
    if: ${{ contains(join(needs.*.result, ','), 'success') && 
      ! contains(fromJson('["refs/heads/main","refs/heads/master"]'), github.ref) }}
    needs: [build-and-push, create-octopus-environment]
    steps:
    - name: Install Octopus CLI 🐙
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.10

    - name: Set Octopus environment
      uses: planday-corp/actions-environment-name-sanitation@v1
      id: set_environment_name

    - name: Deploy release 🐙
      uses: OctopusDeploy/create-release-action@v1.1.1
      id: octopus_release
      with:
        deploy_to: "${{steps.set_environment_name.outputs.environment_name}}"
        api_key: ${{ secrets.octopus_api_key }}
        server: ${{ inputs.octopus_server_url }}
        space: 'Default'
        project: ${{ inputs.octopus_project_name }}
        release_number: ${{inputs.version}}
        progress: true
        ignore_existing: true
        packages: |
          ${{inputs.image_name}}:${{inputs.version}}
          helm:${{inputs.helm_version}}
          planday-service-istio:${{inputs.helm_chart}}
          certificate-and-gateway:${{inputs.gateway}}

    - name: Retrieve SonarQube scan status
      id: sonarqube_scan_status
      if: always() && github.event_name == 'pull_request'
      run: |
        echo "sonarqube_scan_status=${{needs.build-and-push.outputs.sonarqube_scan_status}}" >> $GITHUB_ENV
        echo "sonarqube_server_url=${{needs.build-and-push.outputs.sonarqube_server_url}}" >> $GITHUB_ENV
        echo "image_name=${{needs.build-and-push.outputs.image_name}}" >> $GITHUB_ENV

    - name: Retrieve Octopus release
      id: get_octopus_release
      if: always() && github.event_name == 'pull_request'
      run: |
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#echoing-command-outputs
        echo '::set-output name=action_echo::enabled'

        # Read project id and slug
        read -r project_id project_slug <  <(curl -s -q \
          -H "X-Octopus-ApiKey: ${{secrets.octopus_api_key}}" \
          -H "Accept: application/json" \
          "${{inputs.octopus_server_url}}/api/projects/all" \
          | jq -r -M '.[] | select(.Name == "${{inputs.octopus_project_name}}") | [.Id,.Slug] | @tsv')

        curl -s -q \
          -H "X-Octopus-ApiKey: ${{secrets.octopus_api_key}}" \
          -H "Accept: application/json" \
          "${{inputs.octopus_server_url}}/api/projects/$project_id/releases/${{inputs.version}}" \
          | jq -r -M '' > release.json

        # Read space id
        space_id="$(jq -r -M '.SpaceId' release.json)"

        # Read release packages
        release_packages="$(jq -c -r -M '.SelectedPackages' release.json)"

        # Reconstruct the release URL
        release_url="${{inputs.octopus_server_url}}/app#/$space_id/projects/$project_slug/deployments/releases/${{inputs.version}}"

        echo "release_url=$release_url" >> $GITHUB_ENV
        echo "release_packages=$release_packages" >> $GITHUB_ENV

    - name: Update the Pull Request with the Octopus release results and SonarQube scan status
      uses: actions/github-script@v6
      if: always() && github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const release_packages = JSON.parse(process.env.release_packages)

          // Build the following markdown table (example):
          //
          //
          // | Name | Version | Package Reference Name |
          // | :---: | :---: | :---: |
          // | Deploy Planday service to k8s | `3.4.0` | `helm` |
          // | Deploy Planday service to k8s | `1.0.212` | `helm-chart-istio` |
          // | Deploy Planday service to k8s | `1.0.212` | `certificate-and-gateway` |
          // | Deploy Planday service to k8s | `2.1.160` | `dockerPackage` |
          //
          //
          let md_table = `| Name | Version | Package Reference Name |
          | :---: | :---: | :---: |
          `
          for (var i = 0; i < release_packages.length; i++) {
            var pkg = release_packages[i];
            md_table += '| ' + pkg.ActionName + ' | `' + pkg.Version + '` | `' + pkg.PackageReferenceName + '` |\n';
          }

          let output_octopus = `# 🚀 Octopus Deploy - release v${{ inputs.version }} 🚀

          <details><summary>Details</summary>
          
          [Release URL](${{ env.release_url }})

          `

          output_octopus += '\n\n\n' + md_table
          output_octopus += `
          </details>

          `;

          let sonarqube_project_url = process.env.sonarqube_server_url + '/dashboard?id=' + process.env.image_name
          let sonarqube_scan_status = process.env.sonarqube_scan_status
          let sonarqube_scan_status_symbol = sonarqube_scan_status == "OK" ? "✅" : "💥"
          let output_sonarqube = `# 🧊 SonarQube scan status 🧊
          
          <details><summary>Details</summary>

          
          **Status: ` + sonarqube_scan_status + `** ` + sonarqube_scan_status_symbol + `
          [Project URL](` + sonarqube_project_url + `)

          </details>
          `

          let output = output_octopus + `
          
          ` + output_sonarqube + `

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Save release number
      run: echo ${{inputs.version}} > release_number.txt
    - name: Upload release number
      uses: actions/upload-artifact@v3
      with:
        name: release_number
        path: release_number.txt

  create-aks-namespace-and-gateways:
    name: Create a namespace and a gateway helm release in AKS
    runs-on: self-hosted
    steps:
    - name: Install Azure CLI
      run: |
        which az || { curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash ; }

    -name: Install kubectl
     run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.client_id }}
        tenant-id: ${{ secrets.tenant_id }}
        subscription-id: ${{ secrets.subscription_id }}

    - name: Connect to the AKS cluster
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{inputs.aks_resource_group}}
        cluster-name: ${{inputs.aks_cluster_name}}
        admin: 'true'

    - name: Sanitize AKS namespace
      uses: planday-corp/actions-environment-name-sanitation@v1
      id: set_environment_name

    - name: Check if AKS namespace already exists
      id: get_namespaces
      run: kubectl get namespaces ${{steps.get_environment_name.outputs.environment_name}}

    - name: Create AKS namespace
      if: ${{ contains('test', steps.get_environment_name.outputs.environment_name) }}
      run: |
        if [[ "${steps.get_namespace.outcome}" != 'success' ]]; then
            echo "Creating ${{steps.get_environment_name.outputs.environment_name}} namespace ..."
            kubectl create namespace ${{steps.get_environment_name.outputs.environment_name}}
            kubectl label namespace/${{steps.get_environment_name.outputs.environment_name}} environment=${{steps.get_environment_name.outputs.environment_name}} istio-injection=enabled
          fi